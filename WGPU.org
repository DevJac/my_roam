:PROPERTIES:
:ID:       e7da0025-a124-41fc-a18d-1fce1f21d59f
:END:
#+title: WGPU
* WGPU Spec Notes
** Concepts
*** Adapter
The physical GPU hardware.
*** Device / Queue
A /connection/ to the Adapter, and the Queue which executes commands.
*** Buffer / Texture
Resources stored in GPU memory.
*** CommandBuffer / RenderBundle
Contain user-recorded commands.
**** CommandEncoder
CommandEncoder is created from a Device.

CommandEncoder may create a Pass, and a Pass may have a Pipeline. There are RenderPass, RenderPipeline, ComputePass, and ComputePipeline.

CommandEncoder may be finalized into a CommandBuffer and subbmited to a Queue for execution.

Most configuration happens in a Pipeline, the rest comes from Passes or other special functions.
*** ShaderModule
Contains shader code.
*** Sample / BindGroup
Configure the way Buffers and Textures are used by the GPU.
** Coordinate systems
*** Pixel independent
These coordinate systems has no notion of a pixel.
**** Normalized device coordinates
(x, y, z)

Coordinates contained in a normal unit-cube.
**** Clip space coordinates
(x, y, z, w)

Coordinates contained within a scaled unit-cube; the scaling factor is w.
*** Pixel dependent
**** Framebuffer coordinates / window coordinates / present coordinates
(x, y)

Coordinates correspond to pixels. (0, 0) is top-left.
**** Viewport coordinates / fragment coordinates
(x, y, z)

Like framebuffer coordinates, but with depth z: 0 <= z <= 1.
*** UV coordinates
(u, v)

Texture coordinates: 0 <= u <= 1, 0 <= v <= 1
* WGPU
** Map
[[./images/WGPU/WGPU.png]]
** Concepts
*** Window
A ~Window~ is not provided by WGPU, but by other crates.

Interoperability is provided through the ~raw-window-handle~ crate, which WGPU supports.
*** Instance
~Instance~ is the first thing you create when using WGPU.

~Instance~ is used to create ~Adapters~ and ~Surfaces~.

Does not have to be kept alive.
*** Adapter
Represents the physical device.

Can be used to create a ~Device~ and ~Queue~.

Does not have to be kept alive.
*** Device / Queue
A /connection/ to a ~Device~, and its command ~Queue~.
*** Surface
A canvas you can render to.

Created by ~Instance~ and requires a ~Window~.

Must be configured before presentation using ~Surface.configure~.
**** SurfaceTexture
May be ~presented~ to update the ~Window~ ~Surface~.

~SurfaceTexture::present~ should be called after ~Queue::submit~.
*** Texture
A GPU managed data structure.

You can get the ~Texture~ of a ~Surface~ with ~Surface::get_current_texture~.

You can create a ~Texture~ with ~Device::create_texture~.
**** TextureView
A reference to a ~Texture~. Requires by ~RenderPipeline~ or ~BindGroup~.
*** CommandEncoder
Records ~RenderPasses~, ~ComputePasses~, and transfer operations between driver-managed resources like ~Buffers~ and ~Textures~.

When finished, call ~CommandEncoder::finish~, this finalizes the ~CommandEncoder~ as a ~CommandBuffer~.

Has many methods.
**** CommandBuffer
Created by ~CommandEncoder::finish~.

Can only be ~submitted~ to a ~Queue~, and has no significant methods.
*** RenderPass
**** RenderPassDescriptor
***** Concepts
****** Color
****** Depth
****** Stencil
***** Fields
****** label: Option<str>
****** color_attachments: [Option<RenderPassColorAttachment>]
******* view: TextureView
******* resolve_target: Option<TextureView>
******* ops: Operations<Color>
******** store: bool
******** load: LoadOp<Color>
********* Clear<Color>
********* Load
****** depth_stencil_attachment: [Option<RenderPassDepthStencilAttachment>]
******* view: TextureView
******* depth_ops: Option<Operations<f32>>
******** store: bool
******** load: LoadOp<f32>
********* Clear<f32>
********* Load
******* stencil_ops: Option<Operations<u32>>
******** store: bool
******** load: LoadOp<u32>
********* Clear<u32>
********* Load
*** ShaderModule
A compiled shader. Created from the ~Driver~ using either source code or a SPIR-V binary.
*** TODO RenderPipeline
**** TODO RenderPipelineDescriptor
***** label
***** layout
***** vertex
***** fragment
***** primitive
***** depth_stencil
***** multisample
***** multiview
*** TODO PipelineLayout
*** TODO BindGroup
*** Buffer
A blob of data stored on the GPU.
**** Vertex buffer
An array of vertices, their position and other related data.
**** Index buffer
A type of buffer that refers to another buffer by indices.
** Concept Threads
*** SurfaceTexture
1. Window
2. Instance
3. Surface
   Instance.create_surface(Window)
   Surface.configure(SurfaceConfiguration)
4. SurfaceTexture
5. Texture
6. TextureView
*** RenderPass
1. Instance
2. Adapter
3. Device / Queue
4. CommandEncoder
5. RenderPass
   Render to TextureView
6. CommandBuffer
   Submit CommandBuffer to Queue
   Present SurfaceTexture
*** RenderPipeline
1. Instance
2. Adapter
3. Device / Queue
4. ShaderModule
5. RenderPipeline
6. RenderPass
   RenderPass.set_pipeline(RenderPipeline)
*** Buffer
1. Instance
2. Adapter
3. Device / Queue
4. Buffer
   Use Buffers with:
   - RenderPass.set_vertex_buffer
   - RenderPass.set_index_buffer
   - RenderPass.draw
   - RenderPass.draw_indexed
** Simplified API
*** Instance
**** new (InstanceDescriptor)
Describe which backends must be supported (Vulkan, Metal, etc.)
**** enumerate_adapters
**** request_adapter (RequestAdapterOptions)
Describe power preferences, force software rendering, and ensure surface compatibility.
**** create_surface (unsafe)
**** poll_all
**** generate_report
*** Adapter
**** request_device (DeviceDescriptor)
Describe desired features and limits.
**** is_surface_supported
**** get_info / features / limits / get_downlevel_capabilities
**** get_presentation_timestamp
Returns a GPU timestamp, which is different than a CPU timestamp.
*** TODO Device
**** poll
**** features / limits
**** create_shader_module (ShaderModuleDescriptor, no default)
Describe shader source.
**** create_command_encoder (CommandEncoderDescriptor)
Describe a label, that's it, just a label.
**** create_render_bundle_encoder
**** create_bind_group
**** create_bind_group_layout
**** create_pipeline_layout (PipelineLayoutDescriptor)
Describe the pipeline layout, consisting of bind group layouts, and push constant ranges (another type of layout). Both are lists of layouts.
**** create_render_pipeline (RenderPipelineDescriptor, no default)
Describe:
- the pipeline layout
- vertex shaders, fragment shaders, and their associated layouts
**** create_compute_pipeline
**** create_buffer
**** create_texture
**** create_sampler
**** create_query_set
**** Error handling
***** on_uncaptured_error
***** push_error_scope / pop_error_scope
***** start_capture / stop_capture
*** Queue
**** write_buffer / write_texture
**** submit
**** get_timestamp_period
**** on_submitted_work_done
*** TODO CommandEncoder
**** finish
**** begin_render_pass / begin_compute_pass
**** Buffer / Texture operations
***** copy_buffer_to_buffer / copy_buffer_to_texture / copy_texture_to_buffer / copy_texture_to_texture
***** clear_buffer / clear_texture
**** Profiling
***** write_timestamp
***** resolve_query_set
**** Error handling
***** insert_debug_marker
***** push_debug_group / pop_debug_group
*** CommandBuffer
No methods. Submit using ~Queue::submit~.
*** RenderPass
**** set_...
***** set_bind_group
***** set_pipeline
***** set_blend_constant
***** set_index_buffer
***** set_vertex_buffer
***** set_scissor_rect
***** set_viewport
***** set_stencil_reference
***** set_push_constants
**** draw_...
***** draw
***** draw_indexed
***** draw_indirect
***** draw_indexed_indirect
**** multi_draw_...
***** multi_draw_indirect
***** multi_draw_indexed_indirect
***** multi_draw_indirect_count
***** multi_draw_indexed_indirect_count
**** execute_bundles
**** Debugging / profiling
***** insert_debug_marker
***** push_debug_group / pop_debug_group
***** begin_pipeline_statistics_query / end_pipeline_statistics_query
***** write_timestamp
*** ComputePass
**** set_...
***** set_bind_group
***** set_pipeline
***** set_push_constant
**** dispatch_workgroups
**** dispatch_workgroups_indirect
**** Debugging / profiling
***** insert_debug_market
***** push_debug_group / pop_debug_group
***** begin_pipeline_statistics_query / end_pipeline_statistics_query
***** write_timestamp
*** TODO RenderPipeline
** Threads
*** Main
- Instance
- Adapter
- Device / Queue
- CommandEncoder
- Pass
- Pipeline
*** ShaderModule
**** Created by
Device
**** Requires
ShaderSource
**** Required by
Pipeline
*** TODO CommandEncoder / CommandBuffer
**** Created by
Device
**** Requires
Nothing
**** Required by
Queue
*** TODO RenderBundleEncoder
**** Created by
Device
**** Requires
Values
**** Required by
*** TODO BindGroup
**** Created by
Device
**** Requires
BindGroupLayout
**** Required by
*** BindGroupLayout
**** Created by
Device
**** Requires
Values
**** Required by
- BindGroup
- PipelineLayout
*** TODO PipelineLayout
**** Created by
Device
**** Requires
BindGroupLayout
**** Required by
RenderPipeline
ComputePipeline
*** Pipeline
**** Created by
Device
**** Requires
- ShaderModule
- PipelineLayout
**** Required by
Pass
*** TODO Pass
**** Created by
CommandEncoder
**** Requires
- BindGroup
- Pipeline
**** Required by
*** TODO Buffer
**** Created by
**** Requires
**** Required by
*** TODO Texture
**** Created by
**** Requires
**** Required by
*** TODO Sampler
**** Created by
**** Requires
**** Required by
*** TODO QuerySet
**** Created by
**** Requires
**** Required by
* Shaders
** Types
*** Vertex
*** Fragment
*** Compute
* Resources
** Learn Wgpu
https://sotrh.github.io/learn-wgpu/
*** Progress
<2023-07-19> Finished "The Surface" tutorial

<2023-07-23> Finished "The Pipeline" tutorial
I need to review RenderPipelineDescriptor again later.

<2023-08-02> Finished "Textures and bind groups" tutorial
I'm losing interest in the tutorial and want to learn on my own from my own experiments.
** WebGPU â€” All of the cores, none of the canvas
https://surma.dev/things/webgpu/
** WebGPU Standard
https://www.w3.org/TR/webgpu/
*** Progress
<2023-07-23> Read sections 1 and 2, Introduction, and Malicious use considerations
<2023-07-24> Read through section 3.5. Reading everything is not useful.
** WGSL Standard
https://www.w3.org/TR/WGSL/
** YouTube tutorial series by Dr. Xu
https://www.youtube.com/playlist?list=PL_UrKDEhALdJS0VrLPn7dqC5A4W1vCAUT
